
:mod:`DXFile` --- Read/Write operations on APBS DXFiles
=======================================================

.. module:: DXFile
   :synopsis: Read/Write operations on APBS DXFiles
.. moduleauthor:: Christoph Wilms <christoph.wilms@uni-due.de>
.. sectionauthor:: Jean-Noel Grad <jean-noel.grad@uni-due.de>


This module parses APBS electrostatic files ``.dx``.


.. _DXFile-syntax:

Module Syntax
-------------

Empty.

.. _contents-of-module-DXFile:

Module Contents
---------------

.. class:: DXBox

    This class stores the output of an APBS calculation.

    .. attribute:: box

        The DXBox generated by APBS, stored in a Numpy array of dimensions
        :attr:`box_dim`, *e.g.* (129,129,129) for a typical cubic box.

    .. attribute:: box_dim

        Number of grid points in the X,Y and Z directions (list of 3 ints).
        These numbers are calculated by APBS using the following formula:

        :math:`n = c \cdot 2^{nlev + 1} + 1`

        `nlev <http://www.poissonboltzmann.org/apbs/user-guide/running-apbs/input-files/elec-input-file-section/elec-keywords/nlev>`_
        is the multilevel hierarchy of the calculation, see `dime <http://www.poissonboltzmann.org/apbs/user-guide/running-apbs/input-files/elec-input-file-section/elec-keywords/dime>`_
        for an explanation of this parameter.

    .. attribute:: box_mesh_size

        Grid resolution in Angstroms, as defined by the user (list of 3 floats).

    .. attribute:: box_offset

        Shift between the DXBox geometrical center and the grid origin
        (list of 3 floats).

    .. attribute:: box_center

        DXBox center in Angstroms, shifted by :attr:`box_offset`.

    .. attribute:: file_path

        Filepath to the ``.dx`` file.

    .. method:: getDimensionX()

        Docstring missing.

    .. method:: getDimensionY()

        Docstring missing.

    .. method:: getDimensionZ()

        Docstring missing.

    .. method:: setDimensions(dim, y = 0, z = 0)

        Docstring missing.

    .. method::  getDimensions()

        Docstring missing.

    .. method:: getMaxSideLength()

        Docstring missing.

    .. method:: makeCubic(fillInValue, sidelength = 'noValue')

        Docstring missing.

    .. method:: enlargeBox(dim, fillInValue)

        This method enlarges the box.

    .. method:: has_same_size_as(other_dxbox)

        Docstring missing.

    .. method:: translate(dx, dy = 0, dz = 0)

        Translates all nodes by the given distance along each axis. The box
        is continuous,  thus nodes which are translated over the right edge
        of the grid are reintroduced at the left edge.
        
        Example: With the grid x-Dimension being 97 and the node at x-positon
        96 being translated by 3 along the x-axis, the nodes new x-position
        will be 2: :math:`x = (x + dx) \% dimx`

        TODO: changed,  check if new method is correct!

    .. method:: getNodesByValue(value)

        Gets a list of all nodes which hold the given numerical value.

    .. method:: getNodesWithoutValue(value)

        Gets a list of all nodes which DO NOT hold the given numerical value.

        :param value: value to NOT search for

        :returns: vector-list of all nodes without supplied value

    .. method:: multiply(factor_dxbox)

        Docstring missing.

    .. method:: subtract(substrahend_dxbox)

        Docstring missing.

    .. method:: determineEpitopeNodes(nodes, atoms, meshSize, radius)

        Method takes a list of nodes and returns these which are
        epitope-associated.

        Nodes which reside within the supplied distance from at least
        one of the supplied residues are considered epitope-associated.

        Alogrithm:

            compare every surface-associated node to every atom of every
            epitope-associated residue:
            If this node is within a given range of an atom,  it is
            epitope-associated and added to the list.

        :param nodes: vector-list of epitope candidate nodes
        :param atoms: vector-list atoms which describe the epitope
        :param meshSize: array with mesh spacing of this grid
        :param radius: radius of atoms within which nodes are considered
          epitope-associated

        :returns: vector-list of epitope-associated nodes
        
        .. warning::

            I don't know what Niko is doing here exactly, but I'll
            find that out ... eventually ;)
        

    .. method:: count_nodes_with_value(value)

        Returns number occurrences of a given value within this grid.

    .. method:: count_nodes_without_value(value)

        Docstring missing.

    .. method:: getUniqueValues()

        Returns unique values within this grid.
        
        .. warning::

            Nikos code is very complex here (with threshold and so on),
            so I don't know if I miss something, though the name of the
            function is very clear.

    .. method:: getRotateBox(theta, phi, psi, fillInValue)

        Return a rotated copy of this grid with nodes rotated around the grid center.
        
        This can be seen as rotating the protein and thus the specific information (van-der-Waals surface
        or electrostatic potential) within this grid.

        I use euler-angles, so it is actually phi, theta, psi (x, y, z).
        You can look up Euler angles at wikipedia to understand what
        I do here, it is different from Niko's!

    .. method:: determineConsensoursDimensions(grid1, grid2)

        Returns the consensus grid size of two grids.

    .. method:: add_box(box)

        Docstring missing.

    .. method:: divide_by_scalar(d)

        Docstring missing.

    .. method:: transform_real_to_box_space(atom_coord)

        This method transforms coordinates from the real to the box space.

    .. method:: transform_box_to_real_space(grid_coord)

        This method transforms coordinates from the box to the real space.

    .. method:: indices_in_box(indices)

        This method checks, if the given indices lie inside the box, i.e
        they lie in: :math:`0 <= index < dimensionXYZ`.

    .. method:: write_deprecated(filename, values_per_line = 3)

        Write an array to a dx-file.

    .. method:: _write_deprecated(,outfile, values_per_line)

        Docstring missing.

    .. method:: write(filename, values_per_line = 3)

        Write an array to a dx-file.

    .. method:: _write(,outfile, values_per_line)

        Docstring missing.

    .. method:: _generate_header()

        Docstring missing.

     .. method:: _generate_footer(self)

        This method generates the information at the end of a dx file.

     .. method:: read_dxfile(filename, box_type)

        Docstring missing.

.. class:: DXReader

    Docstring missing.

    .. method:: parse_old(filename, boxType)

        Method to parse supplied DX file. This one is rather slow!

        Returns a VDWBox for 'vdw' and 'smol' box types, otherwise it returns
        a DXBox.

    .. method:: parse(filename, boxType)

        Docstring missing.

    .. method:: _parse_depreciated(filename, boxType)

        Method to parse supplied DX file. This one is twice as fast as the one
        above (but this depends on the size of the DXFile of course)!

.. class:: VDWBox(DXBox)

    Docstring missing.


    .. method:: assignNodeIDs()

        Docstring missing.

    .. method:: applyPeptideScore(score)

        Applies a given score to peptide. Method will retrieve actual
        peptide (peptide nodes without solvent access) if surface- and
        peptide score are identical. If surface-score is different
        from peptide score(peptide nodes are thus distinguishable
        from others) given score is applied to those.

        :param score: score to apply

    .. method:: applySolventScore(score)

        Applies a given score to surface. Method will retrieve actual
        surface (peptide nodes with solvent access) if surface- and
        peptide score are identical. If surface-score is different
        from peptide score(surface nodes are thus distinguishable
        from others) given score is applied to those.

        :param score: score to apply

    .. method:: applySurfaceScore(score)

        Docstring missing.

    .. method:: clone()

        Docstring missing.

    .. method:: createPotentialArea(areaWidth)

        Artificially enlarges the protein surface into surrounding solvent.
        Then sets score within original and artificial surface to 1.
        Everything else is set to 0.

        :param areaWidth: area width

    .. method:: enlargeBox(dim)

        .. warning::

            TODO: Does this work? probably not ;)

    .. method:: determineActualInnerPeptideNodes()

        This Method determines and return an array containing all nodes without
        solvent access. Algorithm works as follows:
        if a node is non solvent-accessible(surface or inner node),
        and has no neighbors which are solvent, the node is an inner node.

    .. method:: determineActualSurfaceNodes()

        This method determines and returns an array containing all nodes with
        direct solvent access.

    .. method:: determineEpitopeSurfaceNodes(atoms, meshSize, rangeCutoff)

        TODO: made use of a more generic method to determine epitope nodes.
        Method resides in super-class DXBox :math:`\rightarrow` determine Epitope nodes.

    .. method:: flood_old_slow(self)

        The VDW grid is a grid of 0's and 1's, like this::

                1 1 1 1
                1 0 0 1
                1 0 1 1
                1 1 1 1

        The algorithm starts at [0,0,0] and appends the neighbors, which
        have a value equal to a solvent grid node (i.e. 1), to the
        newFront-list. After all neighbor nodes from the first list have
        been checked, the list gets deleted and contains now the new
        neighbors.
        The process is repeated until now new neighbors are found, that is
        there are no new neighbors.

        Then the remaining solvent values are treated as protein nodes
        (i.e. they are set to a peptide score, which is 0). All nodes
        that have been assigned a temp value are then set back to 1.

    .. method:: flood()

        This method is the same as flood_old_slow, but it has been written in
        cython and is therefore at least twice as fast!

    .. method:: calculate_sas()

        Calculate the solvent accessible surface.

    .. method:: find_surface()

        This method finds the surface of the protein and assigns
        'score_of_surface' to these points. The box should have been flooded
        before using this function!

        In contrast, find_solvent surface yields the surface that lies in the
        surface. Both surfaces should lie directly next to each other.

    .. method:: find_solvent_surface()

        This method finds the surface that lies in the solvent and
        encapsulates the protein and assigns 'score_of_surface' to these
        points. The box should have been flooded before using this function!

        In contrast, find_surface yields the surface that lies in the protein.
        Both surfaces should lie directly next to each other.

    .. method:: prepare_for_geometric_matching(interior)

        This method prepares the box for geometric matching. It sets the
        solvent to 0, the surface to 1 and the protein interior to the given
        value. This value should be -15 for the fixed protein and 1 for the
        rotated according to Katchalski-Katzir.

        The values for 'solventScore', 'peptideScore', etc. are not updated!

    .. method:: getPeptideNodes()

        :returns: a vector containing all nodes with peptide score

    .. method:: getSolventNodes()

        Docstring missing.

    .. method:: getSurfaceNodes()

        :returns: a vector containing all nodes with surface score

    .. method:: extendSurface(iterations)

        Method to artificially enlarge the protein surface into surrounding solvent.

    .. method:: extend_nice_surface(iterations, dummy_score = 1000)

        Docstring missing.

    .. method:: getNeighborList(seed, radius = 1)

        Generates a List of nodes surrounding a seed-node (0, 0, 0) within a given radius.

    .. method:: highlightEpitope(atoms, meshSize, rangeCutoff, score)

        Docstring missing.

    .. method:: invertScore()

        Method to invert scores of protein/peptide and solvent.

    .. method:: getRotatedBox(theta, phi, psi)

        Docstring missing.

    .. method:: setRotatedNode(rb, x, y, z, value)

        Method to alter score for a larger set of nodes.

    .. method:: setElementsRange(nodes, value)

        Docstring missing.

    .. method:: smoothSurface(iterations, gradient = 1.0)

        Docstring missing.

