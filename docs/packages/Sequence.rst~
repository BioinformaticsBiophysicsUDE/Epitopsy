
:mod:`Sequence` --- Extension of `Bio.Align`
============================================

.. module:: Sequence
   :synopsis: Shortcuts for the automation of repetitive tasks involving biopython alignment objects.
.. moduleauthor:: Christoph Wilms <christoph.wilms@uni-due.de>
.. sectionauthor:: Jean-Noel Grad <jean-noel.grad@uni-due.de>


This module provides various shortcuts for the automation of repetitive tasks involving biopython alignment objects.


.. _Sequence-syntax:

Module Syntax
-------------

The tools in this package generally take a :class:`Bio.Align.MultipleSeqAlignment` object as input and return a list which can be used for the instanciation of a new :class:`Bio.Align.MultipleSeqAlignment` object.

.. _contents-of-module-Sequence:

Module Contents
---------------

.. function:: make_alignment_upper_case(orig_aln)

    Transform all characters to upper case.

    :param orig_aln: biopython alignment, instance of :class:`Bio.Align.MultipleSeqAlignment`
    :type orig_aln: obj

    :returns: upper case biopython alignment, feed for :class:`Bio.Align.MultipleSeqAlignment`


    Example::

        >>> alignment = AlignIO.read(open("/path/seq.txt", "rU"), "fasta")
        >>> print alignment
        SingleLetterAlphabet() alignment with 3 rows and 178 columns
        iigp--gr-gfgkrrhpkkltplaykqfipnvaektlgasgrye...sgg 3M1N:A|PDBID|CHAIN|SEQUENCE
        iigp--grpgfgkrrhpkkltplaykqfipnvaektlgasgrye...sgg PRO1:A|NAME1|CHAIN|SEQUENCE
        iigpxxgrcgfgkrrhpkkltplaykqfipnvaektlgasgrye...sgg PRO2:A|NAME2|CHAIN|SEQUENCE
        >>> new_alignment = Sequence.make_alignment_upper_case(alignment)
        >>> print Align.MultipleSeqAlignment(new_alignment)
        Alphabet() alignment with 3 rows and 178 columns
        IIGP--GR-GFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYE...SGG 3M1N:A|PDBID|CHAIN|SEQUENCE
        IIGP--GRPGFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYE...SGG PRO1:A|NAME1|CHAIN|SEQUENCE
        IIGPXXGRCGFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYE...SGG PRO2:A|NAME2|CHAIN|SEQUENCE

.. function:: make_alignment_clean(orig_aln)

    Deletes sequences with non standard amino acids and reduce the
    alignment size if unnecessary gaps are found (this may happen
    when a sequence is deleted).

    :param orig_aln: biopython alignment, instance of :class:`Bio.Align.MultipleSeqAlignment`
    :type orig_aln: obj

    :returns: a clean biopython alignment, feed for :class:`Bio.Align.MultipleSeqAlignment`

    Example::

        >>> alignment = AlignIO.read(open("/path/seq.txt", "rU"), "fasta")
        >>> print alignment
        SingleLetterAlphabet() alignment with 3 rows and 178 columns
        IIGP--GR-GFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYE...SGG 3M1N:A|PDBID|CHAIN|SEQUENCE
        IIGP--GRPGFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYE...SGG PRO1:A|NAME1|CHAIN|SEQUENCE
        IIGPXXGRCGFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYE...SGG PRO2:A|NAME2|CHAIN|SEQUENCE
        >>> clean_alignment = Sequence.make_alignment_clean(alignment)
        input size: 3 x 178 (#seq x len(seq))
        output size: 2 x 176
        >>> print Align.MultipleSeqAlignment(clean_alignment)
        Alphabet() alignment with 2 rows and 176 columns
        IIGPGR-GFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYEGK...SGG 3M1N:A|PDBID|CHAIN|SEQUENCE
        IIGPGRPGFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYEGK...SGG PRO1:A|NAME1|CHAIN|SEQUENCE
        >>> # 3rd sequence with 'X' was deleted; two '-' became useless and were removed

..
        >>> for record in clean_alignment:
        ...     print "%s...%s %s" % (record.seq[:44], record.seq[-3:], record.id)
        ... 
        IIGPGR-GFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYEGK...SGG 3M1N:A|PDBID|CHAIN|SEQUENCE
        IIGPGRPGFGKRRHPKKLTPLAYKQFIPNVAEKTLGASGRYEGK...SGG 3M2N:A|PDBID|CHAIN|SEQUENCE
        >>> # 3rd sequence with 'X' was deleted; two '-' became useless and were removed


.. function:: format_stockholm_to_fasta(input_path, output_path)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Open a stockholm formatted alignment file located at *input_path* and
    write the corresponding fasta formatted alignment to *output_path*.

    :param input_path: path to the stockholm formatted alignment
    :type input_path: str
    :param output_path: path to the new fasta formatted alignment
    :type output_path: str

    :returns: ``None``

    Example::

        >>> Sequence.format_stockholm_to_fasta("/path/stock.txt", "/path/fasta.txt")

.. function:: get_pairwise_alignment(ref_seq, query_seq)

    Match the query sequence *query_seq* with the reference sequence *ref_seq*
    and return the corresponding  aligned sequences in a dictionary with keys
    ("ref_seq", "query_seq"). It uses the first calculated alignment, equally
    scored alignments are not considered.

    :param ref_seq: string of the reference sequence
    :type ref_seq: str
    :param query_seq: string of the query sequence
    :type query_seq: str

    :returns: a dictionary with keys ("ref_seq", "query_seq")

    Example::

        >>> align = Sequence.get_pairwise_alignment("IIGPTTGRGFGKRR","IIGPGGGRGFGKRR")
        >>> for seq in align.values(): print seq
        ... 
        IIGPTTG--RGFGKRR
        IIGP--GGGRGFGKRR

.. function:: get_almost_conserved_columns(aln, cutoff=0.95)

    Return a list of the positions in the aligned sequence where the amino
    acid with the highest occurence has a frequency larger than the cutoff
    ('-' is also counted as an amino acid). The column index starts with 1!

    :param aln: biopython alignment, instance of :class:`Bio.Align.MultipleSeqAlignment`
    :type aln: obj
    :param cutoff: minimal frequency of occurence
    :type cutoff: float

    :returns: list with the columns index

    Example::

        >>> alignment = AlignIO.read(open("/path/fasta.txt", "rU"), "fasta")
        >>> c = Sequence.get_almost_conserved_columns(alignment)
        >>> print c
        [1, 3, 4, 7, 8, 10, 11, 12, 14, 16]
        >>> # Result visualization
        >>> print alignment; print ''.join('+' if x in c else '-' for x
        ... in range(1,alignment.get_alignment_length()+1)) + " (at 95+%)"
        SingleLetterAlphabet() alignment with 3 rows and 16 columns
        IKGP--GR-GFGPRRH prot1
        IIGPRGGRPGFGKRVH prot2
        IIGPGGGRCGFGKRVH prot3
        +-++--++-+++-+-+ (at 95+%)


