*********************************************
Clustal Omega --- Multiple Sequence Alignment
*********************************************

Biopython provides several modules to perform a Multiple Sequence Alignment
(MSA) using the command line versions of various MSA softwares. The module
:mod:`Bio.Align.Applications.ClustalwCommandline` is an example of module
based on the Clustal family of MSA softwares. It currently supports various
releases of Clustal, including ClustalX, ClustalW, ClustalW2 and Clustal
Omega. For non-challenging MSAs, running a local copy of the Clustal software
can be more efficient than using the online website.

All Clustal releases can be run from the shell, but when Biopython is used
extensively, it may prove useful to integrate such MSAs in the python shell
itself. Clustal can be invoked at any time using the subprocess module::

    >>> import os, subprocess
    >>> env = os.environ.copy()
    >>> env['LD_LIBRARY_PATH'] = "/usr/local/lib"
    >>> seq = "/path/seq.fasta"
    >>> msa = "/path/msa.fasta"
    >>> subprocess.call('clustalo -i {0} --infmt=fa -o {1} --force'.format(seq, msa),shell=True,env=env)

Biopython already provides a module for this task, so you don't have to
memorize the exact syntax of Clustal::

    >>> from Bio.Align.Applications import ClustalOmegaCommandline
    >>> import os, subprocess
    >>> env = os.environ.copy()
    >>> env['LD_LIBRARY_PATH'] = "/usr/local/lib"
    >>> seq = "/path/seq.fasta"
    >>> msa = "/path/msa.fasta"
    >>> clustalo_cline = ClustalOmegaCommandline(infile=seq, outfile=msa, verbose=True, auto=True)
    >>> stdout, stderr = clustalo_cline()
    TODO
    >>> subprocess.call(str(clustalo_cline),shell=True,env=env)
    Using 4 threads
    Read 2 sequences (type: Protein) from /path/seq.fasta
    not more sequences (2) than cluster-size (100), turn off mBed
    Setting options automatically based on input sequence characteristics (might overwrite some of your options).
    Auto settings: Enabling mBed.
    Auto settings: Setting iteration to 1.
    Progressive alignment progress: 100 % (1 out of 1)
    Progressive alignment progress done. CPU time: 0.00u 0.00s 00:00:00.00 Elapsed: 00:00:00
    Iteration step 1 out of 1
    Computing new guide tree (iteration step 1148585808)
    Computing HMM from alignment
    Progressive alignment progress: 100 % (1 out of 1)
    Progressive alignment progress done. CPU time: 0.02u 0.00s 00:00:00.02 Elapsed: 00:00:00
    Alignment written to /path/msa.fasta
    0

.. highlight:: bash

Installation procedure
======================

For the impatients
------------------

Open a shell and type::

    cd $HOME/Downloads/
    wget sourceforge.net/projects/argtable/files/argtable/argtable-2.13/argtable2-13.tar.gz
    tar xfz argtable2-13.tar.gz 
    cd argtable2-13/
    ./configure
    make
    sudo make install
    make clean; cd ..; rm -rf argtable2-13/ argtable2-13.tar.gz
    wget http://www.clustal.org/omega/clustal-omega-1.2.0.tar.gz
    tar xfz clustal-omega-1.2.0.tar.gz 
    cd clustal-omega-1.2.0/
    ./configure
    make
    sudo make install
    make clean; cd ..; rm -rf clustal-omega-1.2.0/ clustal-omega-1.2.0.tar.gz

Step-by-step installation
-------------------------

First, we need to install Argtable::

    cd $HOME/Downloads/
    wget sourceforge.net/projects/argtable/files/argtable/argtable-2.13/argtable2-13.tar.gz
    tar xvfz argtable2-13.tar.gz 
    cd argtable2-13/
    ./configure
    make
    make check
    sudo make install

The ``make check`` command should print this message:

.. code-block:: none

    ./test_file.sh TESTS PASSED
    ---------------------------
    PASS: test_file.sh
    ==================
    All 5 tests passed
    ==================

Check with ``ls /usr/local/lib`` that following files were correctly created:

.. code-block:: none

    libargtable2.a   libargtable2.so    libargtable2.so.0.1.8  
    libargtable2.la  libargtable2.so.0  [...]

You can now remove the install files and the archive::

    make clean
    cd ..
    rm -rf argtable2-13/ argtable2-13.tar.gz

..

   At this point, you will have to export LD_LIBRARY_PATH everytime you use
   clustalo, provided that your libc.conf file links to the correct dynamic
   library::
   
       cat /etc/ld.so.conf.d/libc.conf
       # libc default configuration
       /usr/local/lib
       LD_LIBRARY_PATH=/usr/local/lib
       export LD_LIBRARY_PATH

At this point, you would have to export LD_LIBRARY_PATH everytime you use
Clustal Omega to gain access to ``libargtable2.so.0``::

    LD_LIBRARY_PATH=/usr/local/lib
    export LD_LIBRARY_PATH # libargtable2.so.0 is now available in your shell

Alternatively, you may add this export command into your local .bashrc::

    echo -e '\n# added by $(whoami) for libargtable2.so.0' >> ~/.bashrc
    echo 'export LD_LIBRARY_PATH="/usr/local/lib"' >> ~/.bashrc

Next, we need to install Clustal Omega::

    cd Downloads/
    wget http://www.clustal.org/omega/clustal-omega-1.2.0.tar.gz
    tar xvfz clustal-omega-1.2.0.tar.gz 
    cd clustal-omega-1.2.0/
    ./configure
    make
    make check
    sudo make install
    make installcheck
    make clean

You may get warnings of the type "warning: ISO C++ does not support
variable-length array types [-Wvla]", but these can be ignored. Now check that
the shell command ``clustalo --version`` outputs ``1.2.0``, and remove the
installation files and the archive::

    make clean
    cd ..
    rm -rf clustal-omega-1.2.0/ clustal-omega-1.2.0.tar.gz

